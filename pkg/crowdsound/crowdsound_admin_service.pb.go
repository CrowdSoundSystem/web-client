// Code generated by protoc-gen-go.
// source: pkg/crowdsound/crowdsound_admin_service.proto
// DO NOT EDIT!

package crowdsound

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SkipStatusRequest struct {
}

func (m *SkipStatusRequest) Reset()                    { *m = SkipStatusRequest{} }
func (m *SkipStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SkipStatusRequest) ProtoMessage()               {}
func (*SkipStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SkipStatusResponse struct {
	VotesToSkip int32   `protobuf:"varint,1,opt,name=votes_to_skip" json:"votes_to_skip,omitempty"`
	TotalUsers  int32   `protobuf:"varint,2,opt,name=total_users" json:"total_users,omitempty"`
	Threshold   float32 `protobuf:"fixed32,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (m *SkipStatusResponse) Reset()                    { *m = SkipStatusResponse{} }
func (m *SkipStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*SkipStatusResponse) ProtoMessage()               {}
func (*SkipStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type SkipRequest struct {
}

func (m *SkipRequest) Reset()                    { *m = SkipRequest{} }
func (m *SkipRequest) String() string            { return proto.CompactTextString(m) }
func (*SkipRequest) ProtoMessage()               {}
func (*SkipRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type SkipResponse struct {
}

func (m *SkipResponse) Reset()                    { *m = SkipResponse{} }
func (m *SkipResponse) String() string            { return proto.CompactTextString(m) }
func (*SkipResponse) ProtoMessage()               {}
func (*SkipResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*SkipStatusRequest)(nil), "CrowdSound.SkipStatusRequest")
	proto.RegisterType((*SkipStatusResponse)(nil), "CrowdSound.SkipStatusResponse")
	proto.RegisterType((*SkipRequest)(nil), "CrowdSound.SkipRequest")
	proto.RegisterType((*SkipResponse)(nil), "CrowdSound.SkipResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Admin service

type AdminClient interface {
	SkipStatus(ctx context.Context, in *SkipStatusRequest, opts ...grpc.CallOption) (*SkipStatusResponse, error)
	Skip(ctx context.Context, in *SkipRequest, opts ...grpc.CallOption) (*SkipResponse, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) SkipStatus(ctx context.Context, in *SkipStatusRequest, opts ...grpc.CallOption) (*SkipStatusResponse, error) {
	out := new(SkipStatusResponse)
	err := grpc.Invoke(ctx, "/CrowdSound.Admin/SkipStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Skip(ctx context.Context, in *SkipRequest, opts ...grpc.CallOption) (*SkipResponse, error) {
	out := new(SkipResponse)
	err := grpc.Invoke(ctx, "/CrowdSound.Admin/Skip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	SkipStatus(context.Context, *SkipStatusRequest) (*SkipStatusResponse, error)
	Skip(context.Context, *SkipRequest) (*SkipResponse, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_SkipStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SkipStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AdminServer).SkipStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Admin_Skip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SkipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AdminServer).Skip(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CrowdSound.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SkipStatus",
			Handler:    _Admin_SkipStatus_Handler,
		},
		{
			MethodName: "Skip",
			Handler:    _Admin_Skip_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xdd, 0x6a, 0x05, 0xa7, 0xad, 0xd0, 0x29, 0xe2, 0x22, 0x28, 0x92, 0x93, 0x17, 0x57,
	0xd0, 0xa3, 0x27, 0xf5, 0xec, 0xc5, 0xdc, 0xbc, 0x84, 0xb5, 0x09, 0x76, 0x69, 0xdd, 0x89, 0x99,
	0x49, 0xfd, 0x21, 0xfe, 0x61, 0x37, 0x5d, 0x96, 0x2d, 0x96, 0xde, 0x92, 0xf7, 0x25, 0xef, 0x3d,
	0x1e, 0xdc, 0xfa, 0xe5, 0xe7, 0xdd, 0x3c, 0xd0, 0x8f, 0x65, 0x8a, 0xb5, 0xdd, 0x3a, 0x9a, 0xd2,
	0x7e, 0x55, 0xb5, 0x61, 0x17, 0xd6, 0xd5, 0xdc, 0x15, 0x3e, 0x90, 0x10, 0xc2, 0x4b, 0xe2, 0x3a,
	0x71, 0x35, 0x83, 0xa9, 0x5e, 0x56, 0x5e, 0x4b, 0x29, 0x91, 0xdf, 0xdc, 0x77, 0x74, 0x2c, 0x4a,
	0x03, 0x6e, 0x8b, 0xec, 0xa9, 0x66, 0x87, 0x67, 0x30, 0x59, 0x93, 0x38, 0x36, 0x42, 0x86, 0x1b,
	0x9c, 0x67, 0xd7, 0xd9, 0xcd, 0x10, 0x67, 0x30, 0x12, 0x92, 0x72, 0x65, 0x62, 0x93, 0xc2, 0xf9,
	0x60, 0x23, 0x4e, 0xe1, 0x44, 0x16, 0xc1, 0xf1, 0x82, 0x56, 0x36, 0x3f, 0x6c, 0xa4, 0x81, 0x9a,
	0xc0, 0x28, 0x99, 0x76, 0x19, 0xa7, 0x30, 0x6e, 0xaf, 0xad, 0xfb, 0xfd, 0x6f, 0x06, 0xc3, 0xa7,
	0x54, 0x16, 0x5f, 0x01, 0xfa, 0x74, 0xbc, 0x2c, 0xfa, 0xb6, 0xc5, 0x4e, 0xd5, 0x8b, 0xab, 0x7d,
	0xb8, 0xb5, 0x55, 0x07, 0xf8, 0x08, 0x47, 0x49, 0xc7, 0xf3, 0xff, 0x2f, 0x3b, 0x8b, 0x7c, 0x17,
	0x74, 0x9f, 0x9f, 0xc7, 0xef, 0xd0, 0x8f, 0xf9, 0x71, 0xbc, 0xd9, 0xef, 0xe1, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x2b, 0x14, 0x88, 0x70, 0x01, 0x00, 0x00,
}
